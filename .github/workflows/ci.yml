on: [push, pull_request]

name: ci

jobs:
  build:
    name: build
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        os: [linux]
        arch:
          - amd64
          - arm
          - arm64
        include:
          - arch: amd64
            os: linux
            # supports Ubuntu 14.04, Debian 8, etc.
            cc: zig cc -target x86_64-linux-gnu.2.17
          - arch: arm
            os: linux
            # XXX: cannot build with arm-linux-gnueabihf https://github.com/ziglang/zig/issues/3287
            cc: zig cc -target arm-linux-musleabihf
          - arch: arm64
            os: linux
            # supports Ubuntu 14.04, Debian 8, etc.
            cc: zig cc -target aarch64-linux-gnu.2.17
    env:
      GOOS: '${{ matrix.os }}'
      GOARCH: '${{ matrix.arch }}'
      CC: '${{ matrix.cc }}'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
      - run: sudo snap install zig --classic --beta # assuming `zig cc` interface is stable
      - run: make build RELEASE=1
      - uses: actions/upload-artifact@v3
        with:
          name: linux_dvb_exporter-${{ matrix.os }}-${{ matrix.arch }}
          path: ./linux_dvb_exporter
  lint:
    name: golangci-lint
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: golangci/golangci-lint-action@v3
        with:
          version: 'v1.50'
  release:
    name: release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs:
      - build
      - lint
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        os: [linux]
        arch:
          - amd64
          - arm
          - arm64
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: linux_dvb_exporter-${{ matrix.os }}-${{ matrix.arch }}
      - env:
          GOOS: '${{ matrix.os }}'
          GOARCH: '${{ matrix.arch }}'
        run: |
          name=linux_dvb_exporter-$(cat VERSION).$GOOS-$GOARCH
          mkdir "$name"
          mv README.md "${name}/"
          chmod +x linux_dvb_exporter
          mv linux_dvb_exporter "${name}/"
          tar cf "$name.tar.gz" "$name"
      - uses: softprops/action-gh-release@v1
        with:
          files: linux_dvb_exporter-*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build_container_image:
    name: build container image
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main')
    needs:
      - build
      - lint
    runs-on: ubuntu-22.04
    env:
      BIN_DIR: ./dist
      IMAGE_REPOSITORY: ghcr.io/coord-e/linux-dvb-exporter
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
      - run: mkdir -p $BIN_DIR/{amd64,arm64}
      - uses: actions/download-artifact@v3
        with:
          name: linux_dvb_exporter-linux-amd64
          path: ${{ env.BIN_DIR }}/amd64/
      - uses: actions/download-artifact@v3
        with:
          name: linux_dvb_exporter-linux-arm64
          path: ${{ env.BIN_DIR }}/arm64/
      - run: chmod +x $BIN_DIR/{amd64,arm64}/*
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: select tags
        id: select-tags
        run: |
          if [ "$GITHUB_REF_TYPE" == tag ]; then
            echo "::set-output name=tags::$IMAGE_REPOSITORY:latest,$IMAGE_REPOSITORY:$(cat VERSION)"
          else
            echo "::set-output name=tags::$IMAGE_REPOSITORY:$GITHUB_SHA,$IMAGE_REPOSITORY:$GITHUB_REF_NAME"
          fi
      - uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.select-tags.outputs.tags }}
          build-args: BIN_DIR
